/* Add or update these CSS rules */

/* Base text color */
body, input, button, a, p, h1, h2, h3, h4, h5, h6, span, div {
    color: #fff;
}

/* Navigation */
.main-nav {
    background: rgba(0, 0, 0, 0.2);
}

.nav-content a {
    color: #fff !important;
    font-size: 2rem;
    font-weight: bold;
}

/* User list */
.users-list h2 {
    color: #fff;
    font-size: 1.5rem;
    margin-bottom: 1rem;
}

.user-item a {
    color: #fff !important;
    text-decoration: none;
}

.user-name {
    color: #fff;
    font-weight: 600;
}

.user-status {
    color: rgba(255, 255, 255, 0.7);
}

/* Chat area */
.message-content {
    color: #fff;
}

.message-timestamp {
    color: rgba(255, 255, 255, 0.7);
}

/* Input area */
.input-container input {
    color: #fff;
}

.input-container input::placeholder {
    color: rgba(255, 255, 255, 0.5);
}

/* Buttons */
.action-button, .send-button {
    color: #fff;
}

/* Status icons */
.status-icon {
    color: rgba(255, 255, 255, 0.7);
}

.status-read {
    color: #3b82f6;
}

/* Mobile menu button */
.mobile-menu-button {
    color: #fff;
}

/* Auth forms */
.auth-form input {
    color: #fff;
}

.auth-form label {
    color: #fff;
}

/* Messages */
.messages .error {
    color: #fff;
    background-color: rgba(239, 68, 68, 0.2);
}

.messages .success {
    color: #fff;
    background-color: rgba(34, 197, 94, 0.2);
}

:root {
    --primary-gradient: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
    --glass-bg: rgba(255, 255, 255, 0.1);
    --glass-border: rgba(255, 255, 255, 0.2);
    --message-sent: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    --message-received: rgba(255, 255, 255, 0.1);
}

/* Base Styles */
body {
    margin: 0;
    padding: 0;
    font-family: 'Inter', sans-serif;
    background: linear-gradient(45deg, #0f172a 0%, #1e293b 100%);
    color: #fff;
    min-height: 100vh;
}

/* Navigation Styles */
.main-nav {
    background: var(--glass-bg);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid var(--glass-border);
    padding: 1rem;
    position: sticky;
    top: 0;
    z-index: 100;
}

.nav-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/* Auth Styles */
.auth-container {
    min-height: calc(100vh - 140px);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
}

.auth-box {
    background: var(--glass-bg);
    backdrop-filter: blur(10px);
    border: 1px solid var(--glass-border);
    padding: 2rem;
    border-radius: 1rem;
    width: 100%;
    max-width: 400px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

/* Password Input Container */
.password-input-container {
    position: relative;
    width: 100%;
}

.password-toggle {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.7);
    cursor: pointer;
    padding: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.3s ease;
}

.password-toggle:hover {
    color: #fff;
}

/* Chat Container Styles */
.chat-container {
    display: flex;
    height: calc(100vh - 64px);
    position: relative;
}

.users-list {
    width: 300px;
    background: var(--glass-bg);
    backdrop-filter: blur(10px);
    border-right: 1px solid var(--glass-border);
    padding: 20px;
    transition: transform 0.3s ease;
}

.chat-area {
    flex: 1;
    display: flex;
    flex-direction: column;
    height: calc(100vh - 64px);
}

/* Message Styles */
.messages {
    flex: 1;
    max-height: calc(100vh - 180px);
    overflow-y: auto;
    padding: 20px;
    margin-bottom: 0;
    display: flex;
    flex-direction: column;
    gap: 15px;
    scroll-behavior: smooth;
}

.message {
    max-width: 70%;
    display: flex;
    flex-direction: column;
    gap: 4px;
    animation: messageAppear 0.3s ease;
}

@keyframes messageAppear {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.message.sent {
    margin-left: auto;
}

.message-content {
    padding: 12px 16px;
    border-radius: 16px;
    background: var(--message-received);
    position: relative;
    color: #fff;
}

.message.sent .message-content {
    background: var(--message-sent);
    color: #fff;
}

.message-info {
    display: flex;
    align-items: center;
    gap: 4px;
    font-size: 0.75rem;
    color: rgba(255, 255, 255, 0.7);
    margin-top: 2px;
}

.message-status {
    display: flex;
    align-items: center;
}

.message-status svg {
    width: 16px;
    height: 16px;
}

/* Input Area Styles */
.message-input {
    position: sticky;
    bottom: 0;
    background: var(--glass-bg);
    backdrop-filter: blur(10px);
    border-top: 1px solid var(--glass-border);
    padding: 15px;
    margin-top: auto;
}

.input-container {
    display: flex;
    gap: 12px;
    align-items: center;
}

.input-container input {
    flex: 1;
    padding: 12px 20px;
    border: 1px solid var(--glass-border);
    border-radius: 24px;
    background: rgba(255, 255, 255, 0.05);
    color: #fff;
    font-size: 0.95rem;
    transition: all 0.3s ease;
}

.input-container input:focus {
    outline: none;
    border-color: #6366f1;
    background: rgba(255, 255, 255, 0.1);
}

/* Mobile Menu Button */
.mobile-menu-button {
    display: none;
    position: fixed;
    left: 1rem;
    top: 1rem;
    z-index: 1000;
    background: var(--glass-bg);
    border: 1px solid var(--glass-border);
    backdrop-filter: blur(10px);
    padding: 0.5rem;
    border-radius: 0.5rem;
    cursor: pointer;
}

/* Responsive Design */
@media (max-width: 1024px) {
    .users-list {
        width: 250px;
    }
}

@media (max-width: 768px) {
    .mobile-menu-button {
        display: block;
    }

    .users-list {
        position: fixed;
        left: 0;
        top: 0;
        bottom: 0;
        z-index: 99;
        transform: translateX(-100%);
    }

    .users-list.active {
        transform: translateX(0);
    }

    .chat-area {
        width: 100%;
    }

    .message {
        max-width: 85%;
    }

    .input-container {
        gap: 8px;
    }

    .action-button {
        width: 36px;
        height: 36px;
    }
}

@media (max-width: 480px) {
    .auth-box {
        margin: 1rem;
        padding: 1.5rem;
    }

    .message {
        max-width: 90%;
    }

    .message-content {
        padding: 10px 12px;
    }

    .input-container input {
        padding: 10px 16px;
    }
}

/* Scrollbar Styles */
.messages::-webkit-scrollbar {
    width: 6px;
}

.messages::-webkit-scrollbar-track {
    background: transparent;
}

.messages::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
}

/* Message Status Icons */
.status-icon {
    display: inline-flex;
    margin-left: 4px;
}

.status-sent {
    color: rgba(255, 255, 255, 0.5);
}

.status-delivered {
    color: rgba(255, 255, 255, 0.7);
}

.status-read {
    color: #3b82f6;
}

/* Added Styles */
.user-name, .user-status, .message-content, .auth-form label {
    color: #fff;
}

.user-item a {
    color: #fff;
}

/* User Styles */
.home-container {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.users-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
}

.user-card {
    background: var(--glass-bg);
    border: 1px solid var(--glass-border);
    border-radius: 1rem;
    overflow: hidden;
    transition: transform 0.2s ease;
}

.user-card:hover {
    transform: translateY(-2px);
}

.user-link {
    display: flex;
    align-items: center;
    padding: 1rem;
    color: #fff !important;
    text-decoration: none;
}

.user-avatar {
    width: 48px;
    height: 48px;
    background: var(--primary-gradient);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    font-weight: 600;
    color: #fff;
    margin-right: 1rem;
}

.user-info {
    flex: 1;
}

.user-name {
    font-size: 1rem;
    font-weight: 600;
    margin: 0;
    color: #fff;
}

.user-status {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.7);
    margin: 0;
}
/* Add these styles to your existing CSS file */

.auth-form input {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: white;
}

.auth-form input:focus {
    border-color: #3b82f6;
    background: rgba(255, 255, 255, 0.1);
}

.auth-form input::placeholder {
    color: rgba(255, 255, 255, 0.5);
}

.password-input-container {
    position: relative;
}

.password-toggle {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.7);
    cursor: pointer;
    padding: 4px;
}

.password-toggle:hover {
    color: white;
}

.messages {
    margin-bottom: 1rem;
}

.messages div {
    padding: 0.75rem;
    border-radius: 0.375rem;
    margin-bottom: 0.5rem;
}

.messages .error {
    background-color: rgba(239, 68, 68, 0.2);
    border: 1px solid rgba(239, 68, 68, 0.3);
}

.messages .success {
    background-color: rgba(34, 197, 94, 0.2);
    border: 1px solid rgba(34, 197, 94, 0.3);
}

```[v0-no-op-code-block-prefix]

5. Update the room.html JavaScript to handle real-time message updates:

```html type="code" project="Chat App" file="chat/templates/chat/room.html"
{% extends 'chat/base.html' %}

{% block content %}
<button class="mobile-menu-button" onclick="toggleMobileMenu()">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
    </svg>
</button>

<div class="chat-container">
    <div class="users-list" id="usersList">
        <h2>Conversations</h2>
        <div class="users-menu">
            {% for user in users %}
            <div class="user-item {% if user.username == other_user.username %}active{% endif %}" data-username="{{ user.username }}">
                <a href="{% url 'chat_room' user.username %}">
                    <div class="user-avatar">
                        {{ user.username|make_list|first|upper }}
                    </div>
                    <div class="user-info">
                        <div class="user-name">{{ user.username }}</div>
                        <div class="user-status">
                            {% if user.is_online %}Online{% else %}Offline{% endif %}
                        </div>
                    </div>
                </a>
            </div>
            {% endfor %}
        </div>
    </div>

    <div class="chat-area">
        <div class="chat-header">
            <div class="user-avatar">
                {{ other_user.username|make_list|first|upper }}
            </div>
            <div class="user-info">
                <div class="user-name">{{ other_user.username }}</div>
                <div class="user-status">
                    {% if other_user.is_online %}Online{% else %}Last seen recently{% endif %}
                </div>
            </div>
        </div>

        <div class="messages" id="messages">
            {% for message in messages %}
            <div class="message {% if message.sender == request.user %}sent{% else %}received{% endif %}" data-message-id="{{ message.id }}">
                <div class="message-content">{{ message.content }}</div>
                <div class="message-info">
                    <span class="message-timestamp">{{ message.timestamp|date:"H:i" }}</span>
                    {% if message.sender == request.user %}
                        <span class="message-status">
                            {% if message.is_read %}
                                <span class="status-icon status-read">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M17 2l-5 5-3-3"/>
                                        <path d="M22 2l-5 5-3-3"/>
                                    </svg>
                                </span>
                            {% else %}
                                <span class="status-icon status-delivered">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M20 6L9 17l-5-5"/>
                                    </svg>
                                </span>
                            {% endif %}
                        </span>
                    {% endif %}
                </div>
            </div>
            {% endfor %}
        </div>

        <div class="message-input">
            <div class="input-container">
                <button class="action-button">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                </button>
                <input type="text" id="chat-message-input" placeholder="Type your message...">
                <button class="action-button">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z"/>
                    </svg>
                </button>
                <button id="chat-message-submit" class="send-button">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="22" y1="2" x2="11" y2="13"/>
                        <polygon points="22 2 15 22 11 13 2 9 22 2"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    const roomName = "{{ request.user.username }}_{{ other_user.username }}";
    const chatSocket = new WebSocket(
        'ws://' + window.location.host + '/ws/chat/' + roomName + '/'
    );

    const messagesContainer = document.getElementById('messages');
    const messageInput = document.querySelector('#chat-message-input');
    const sendButton = document.querySelector('#chat-message-submit');

    function createMessageElement(message, sender, messageId, timestamp) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender === "{{ request.user.username }}" ? 'sent' : 'received'}`;
        messageDiv.setAttribute('data-message-id', messageId);

        messageDiv.innerHTML = `
            <div class="message-content">${message}</div>
            <div class="message-info">
                <span class="message-timestamp">${timestamp}</span>
                ${sender === "{{ request.user.username }}" ? `
                    <span class="message-status">
                        <span class="status-icon status-sent">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M20 6L9 17l-5-5"/>
                            </svg>
                        </span>
                    </span>
                ` : ''}
            </div>
        `;

        return messageDiv;
    }

    chatSocket.onmessage = function(e) {
        const data = JSON.parse(e.data);
        const messageElement = createMessageElement(
            data.message,
            data.sender,
            data.message_id,
            data.timestamp
        );
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        // If we received a message, mark it as read
        if (data.sender !== "{{ request.user.username }}") {
            fetch(`/api/messages/${data.message_id}/read/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': getCookie('csrftoken')
                }
            });
        }
    };

    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }


    function sendMessage() {
        const message = messageInput.value.trim();
        if (message) {
            chatSocket.send(JSON.stringify({
                'message': message,
                'receiver': "{{ other_user.username }}"
            }));
            messageInput.value = '';
        }
    }

    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    sendButton.addEventListener('click', sendMessage);

    // Mobile menu toggle
    function toggleMobileMenu() {
        const usersList = document.getElementById('usersList');
        usersList.classList.toggle('active');
    }

    // Close mobile menu when clicking outside
    document.addEventListener('click', function(e) {
        const usersList = document.getElementById('usersList');
        const mobileMenuButton = document.querySelector('.mobile-menu-button');

        if (!usersList.contains(e.target) && !mobileMenuButton.contains(e.target)) {
            usersList.classList.remove('active');
        }
    });

    // Add smooth scroll behavior when new messages arrive
    messagesContainer.scrollTop = messagesContainer.scrollHeight;

    // Add animation to send button
    sendButton.addEventListener('mousedown', function() {
        this.style.transform = 'scale(0.95)';
    });

    sendButton.addEventListener('mouseup', function() {
        this.style.transform = 'scale(1)';
    });
</script>
{% endblock %}